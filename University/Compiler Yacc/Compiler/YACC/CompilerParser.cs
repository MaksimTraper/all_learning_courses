// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-M1P53SP
// DateTime: 06.06.2022 15:35:53
// UserName: pc
// Input file <C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y - 10.01.2021 2:52:02>

// options: lines

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using Compiler.Helpers;
using Compiler.Nodes;

namespace Compiler
{
internal enum Tokens {error=128,EOF=129,LITERAL=130,LETTER=131,PRINT=132,
    EVAL=133,GETTYPE=134,RESET=135,EXIT=136,HELP=137,EOL=138,
    SMALLER=139,BIGGER=140,ASSIGN=141,IF=142,MODECHANGE=143,BREAK=144,
    FOO=145,UMINUS=146};

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class Parser: ShiftReduceParser<Node, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[32];
  private static State[] states = new State[71];
  private static string[] nonTerms = new string[] {
      "list", "$accept", "statement", "sequence", "action", "expr", };

  static Parser() {
    states[0] = new State(-2,new int[]{-1,1});
    states[1] = new State(new int[]{129,2,128,5,141,9,136,50,145,51,144,52,130,53,133,54,134,56,143,58,137,60,135,61,132,62,40,63},new int[]{-3,3,-4,7,-5,70});
    states[2] = new State(-1);
    states[3] = new State(new int[]{138,4});
    states[4] = new State(-3);
    states[5] = new State(new int[]{138,6});
    states[6] = new State(-4);
    states[7] = new State(new int[]{141,9,136,50,145,51,144,52,130,53,133,54,134,56,143,58,137,60,135,61,132,62,40,63,138,-5},new int[]{-5,8});
    states[8] = new State(-7);
    states[9] = new State(new int[]{40,10});
    states[10] = new State(new int[]{131,11});
    states[11] = new State(new int[]{40,14,139,19,140,24,126,29,130,31,131,32,45,33},new int[]{-6,12});
    states[12] = new State(new int[]{41,13});
    states[13] = new State(-8);
    states[14] = new State(new int[]{40,14,139,19,140,24,126,29,130,31,131,32,45,33},new int[]{-6,15});
    states[15] = new State(new int[]{42,16,47,35,43,38,45,41,94,44,38,47});
    states[16] = new State(new int[]{40,14,139,19,140,24,126,29,130,31,131,32,45,33},new int[]{-6,17});
    states[17] = new State(new int[]{41,18});
    states[18] = new State(-20);
    states[19] = new State(new int[]{40,20});
    states[20] = new State(new int[]{40,14,139,19,140,24,126,29,130,31,131,32,45,33},new int[]{-6,21});
    states[21] = new State(new int[]{40,14,139,19,140,24,126,29,130,31,131,32,45,33},new int[]{-6,22});
    states[22] = new State(new int[]{41,23});
    states[23] = new State(-25);
    states[24] = new State(new int[]{40,25});
    states[25] = new State(new int[]{40,14,139,19,140,24,126,29,130,31,131,32,45,33},new int[]{-6,26});
    states[26] = new State(new int[]{40,14,139,19,140,24,126,29,130,31,131,32,45,33},new int[]{-6,27});
    states[27] = new State(new int[]{41,28});
    states[28] = new State(-26);
    states[29] = new State(new int[]{40,14,139,19,140,24,126,29,130,31,131,32,45,33},new int[]{-6,30});
    states[30] = new State(-28);
    states[31] = new State(-29);
    states[32] = new State(-30);
    states[33] = new State(new int[]{40,14,139,19,140,24,126,29,130,31,131,32,45,33},new int[]{-6,34});
    states[34] = new State(-31);
    states[35] = new State(new int[]{40,14,139,19,140,24,126,29,130,31,131,32,45,33},new int[]{-6,36});
    states[36] = new State(new int[]{41,37});
    states[37] = new State(-21);
    states[38] = new State(new int[]{40,14,139,19,140,24,126,29,130,31,131,32,45,33},new int[]{-6,39});
    states[39] = new State(new int[]{41,40});
    states[40] = new State(-22);
    states[41] = new State(new int[]{40,14,139,19,140,24,126,29,130,31,131,32,45,33},new int[]{-6,42});
    states[42] = new State(new int[]{41,43});
    states[43] = new State(-23);
    states[44] = new State(new int[]{40,14,139,19,140,24,126,29,130,31,131,32,45,33},new int[]{-6,45});
    states[45] = new State(new int[]{41,46});
    states[46] = new State(-24);
    states[47] = new State(new int[]{40,14,139,19,140,24,126,29,130,31,131,32,45,33},new int[]{-6,48});
    states[48] = new State(new int[]{41,49});
    states[49] = new State(-27);
    states[50] = new State(-9);
    states[51] = new State(-10);
    states[52] = new State(-11);
    states[53] = new State(-12);
    states[54] = new State(new int[]{40,14,139,19,140,24,126,29,130,31,131,32,45,33},new int[]{-6,55});
    states[55] = new State(-13);
    states[56] = new State(new int[]{40,14,139,19,140,24,126,29,130,31,131,32,45,33},new int[]{-6,57});
    states[57] = new State(-14);
    states[58] = new State(new int[]{130,59});
    states[59] = new State(-15);
    states[60] = new State(-16);
    states[61] = new State(-17);
    states[62] = new State(-18);
    states[63] = new State(new int[]{40,14,139,19,140,24,126,29,130,31,131,32,45,33},new int[]{-6,64});
    states[64] = new State(new int[]{41,65});
    states[65] = new State(new int[]{142,66});
    states[66] = new State(new int[]{40,67});
    states[67] = new State(new int[]{141,9,136,50,145,51,144,52,130,53,133,54,134,56,143,58,137,60,135,61,132,62,40,63},new int[]{-4,68,-5,70});
    states[68] = new State(new int[]{41,69,141,9,136,50,145,51,144,52,130,53,133,54,134,56,143,58,137,60,135,61,132,62,40,63},new int[]{-5,8});
    states[69] = new State(-19);
    states[70] = new State(-6);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,129});
    rules[2] = new Rule(-1, new int[]{});
    rules[3] = new Rule(-1, new int[]{-1,-3,138});
    rules[4] = new Rule(-1, new int[]{-1,128,138});
    rules[5] = new Rule(-3, new int[]{-4});
    rules[6] = new Rule(-4, new int[]{-5});
    rules[7] = new Rule(-4, new int[]{-4,-5});
    rules[8] = new Rule(-5, new int[]{141,40,131,-6,41});
    rules[9] = new Rule(-5, new int[]{136});
    rules[10] = new Rule(-5, new int[]{145});
    rules[11] = new Rule(-5, new int[]{144});
    rules[12] = new Rule(-5, new int[]{130});
    rules[13] = new Rule(-5, new int[]{133,-6});
    rules[14] = new Rule(-5, new int[]{134,-6});
    rules[15] = new Rule(-5, new int[]{143,130});
    rules[16] = new Rule(-5, new int[]{137});
    rules[17] = new Rule(-5, new int[]{135});
    rules[18] = new Rule(-5, new int[]{132});
    rules[19] = new Rule(-5, new int[]{40,-6,41,142,40,-4,41});
    rules[20] = new Rule(-6, new int[]{40,-6,42,-6,41});
    rules[21] = new Rule(-6, new int[]{40,-6,47,-6,41});
    rules[22] = new Rule(-6, new int[]{40,-6,43,-6,41});
    rules[23] = new Rule(-6, new int[]{40,-6,45,-6,41});
    rules[24] = new Rule(-6, new int[]{40,-6,94,-6,41});
    rules[25] = new Rule(-6, new int[]{139,40,-6,-6,41});
    rules[26] = new Rule(-6, new int[]{140,40,-6,-6,41});
    rules[27] = new Rule(-6, new int[]{40,-6,38,-6,41});
    rules[28] = new Rule(-6, new int[]{126,-6});
    rules[29] = new Rule(-6, new int[]{130});
    rules[30] = new Rule(-6, new int[]{131});
    rules[31] = new Rule(-6, new int[]{45,-6});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 4: // list -> list, error, EOL
#line 40 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
                            { yyerrok(); }
#line default
        break;
      case 5: // statement -> sequence
#line 45 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
                    { this.DoStat(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 6: // sequence -> action
#line 50 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
                 { CurrentSemanticValue = MakeSequence(NodeTag.sequence, ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 7: // sequence -> sequence, action
#line 51 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
                         { CurrentSemanticValue = MakeSequence(NodeTag.sequence, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 8: // action -> ASSIGN, '(', LETTER, expr, ')'
#line 56 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
                                { CurrentSemanticValue = MakeBinary(NodeTag.assign, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 9: // action -> EXIT
#line 57 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
                { CurrentSemanticValue = MakeLeaf(NodeTag.exit); }
#line default
        break;
      case 10: // action -> FOO
#line 58 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
               { CurrentSemanticValue = MakeLeaf(NodeTag.foo); }
#line default
        break;
      case 11: // action -> BREAK
#line 59 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
                 { CurrentSemanticValue = MakeLeaf(NodeTag.myBreak); }
#line default
        break;
      case 12: // action -> LITERAL
#line 60 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
                  { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 13: // action -> EVAL, expr
#line 61 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
                    { CurrentSemanticValue = MakeUnary(NodeTag.display, ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 14: // action -> GETTYPE, expr
#line 62 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
                      { CurrentSemanticValue = MakeUnary(NodeTag.getType, ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 15: // action -> MODECHANGE, LITERAL
#line 63 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
                          { CurrentSemanticValue = MakeUnary(NodeTag.changeMode, ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 16: // action -> HELP
#line 64 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
                { CurrentSemanticValue = MakeLeaf(NodeTag.help); }
#line default
        break;
      case 17: // action -> RESET
#line 65 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
                 { CurrentSemanticValue = MakeLeaf(NodeTag.clear); }
#line default
        break;
      case 18: // action -> PRINT
#line 66 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
                 { CurrentSemanticValue = MakeLeaf(NodeTag.print); }
#line default
        break;
      case 19: // action -> '(', expr, ')', IF, '(', sequence, ')'
#line 67 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
                                        { CurrentSemanticValue = MakeBinary(NodeTag.loop, ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 20: // expr -> '(', expr, '*', expr, ')'
#line 72 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
                                { CurrentSemanticValue = MakeBinary(NodeTag.mul, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 21: // expr -> '(', expr, '/', expr, ')'
#line 73 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
                                { CurrentSemanticValue = MakeBinary(NodeTag.div, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 22: // expr -> '(', expr, '+', expr, ')'
#line 74 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
                             { CurrentSemanticValue = MakeBinary(NodeTag.plus, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 23: // expr -> '(', expr, '-', expr, ')'
#line 75 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
                                   { CurrentSemanticValue = MakeBinary(NodeTag.minus, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 24: // expr -> '(', expr, '^', expr, ')'
#line 76 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
                             { CurrentSemanticValue = MakeBinary(NodeTag.power, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 25: // expr -> SMALLER, '(', expr, expr, ')'
#line 77 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
                                   { CurrentSemanticValue = MakeBinary(NodeTag.smaller, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 26: // expr -> BIGGER, '(', expr, expr, ')'
#line 78 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
                                { CurrentSemanticValue = MakeBinary(NodeTag.bigger, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 27: // expr -> '(', expr, '&', expr, ')'
#line 79 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
                                { CurrentSemanticValue = MakeBinary(NodeTag.conjunction, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 28: // expr -> '~', expr
#line 80 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
                    { CurrentSemanticValue = MakeUnary(NodeTag.sqrt, ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 31: // expr -> '-', expr
#line 83 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
                              { CurrentSemanticValue = MakeUnary(NodeTag.negate, ValueStack[ValueStack.Depth-1]); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 87 "C:\Users\pc\OneDrive\Рабочий стол\Compiler\YACC\Compiler.y"
/*
 * All the code is in the helper file RealTreeHelper.cs 
 */ 
#line default
}
}
