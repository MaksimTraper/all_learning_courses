// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-JQAPB6P
// DateTime: 3/18/2023 12:11:57 AM
// UserName: dekst
// Input file <E:\20390_Трапер_Компилятор\Комп2\Compiler\YACC\Compiler.y - 3/17/2023 10:28:15 PM>

// options: conflicts no-lines gplex conflicts

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using Compiler.Helpers;
using Compiler.Nodes;

namespace Compiler
{
internal enum Tokens {error=128,EOF=129,LITERAL=130,LETTER=131,PRINT=132,
    EVAL=133,GETTYPE=134,RESET=135,EXIT=136,HELP=137,EOL=138,
    SMALLER=139,BIGGER=140,SUBSTRING=141,ASSIGN=142,IF=143,MODECHANGE=144,
    BREAK=145,FOO=146,ADD=147,MINUS=148,DIV=149,MULT=150,
    NEG=151,CONDITION=152,DISJUNCTION=153,NOTEQUAL=154,UMINUS=155};

// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<Node,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public Node yylval;
  public LexLocation yylloc;
  public ScanObj( int t, Node val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class Parser: ShiftReduceParser<Node, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[33];
  private static State[] states = new State[77];
  private static string[] nonTerms = new string[] {
      "list", "$accept", "statement", "sequence", "action", "expr", };

  static Parser() {
    states[0] = new State(-2,new int[]{-1,1});
    states[1] = new State(new int[]{129,2,128,5,142,9,136,56,146,57,145,58,130,59,133,60,134,62,144,64,137,66,135,67,132,68,40,69},new int[]{-3,3,-4,7,-5,76});
    states[2] = new State(-1);
    states[3] = new State(new int[]{138,4});
    states[4] = new State(-3);
    states[5] = new State(new int[]{138,6});
    states[6] = new State(-4);
    states[7] = new State(new int[]{142,9,136,56,146,57,145,58,130,59,133,60,134,62,144,64,137,66,135,67,132,68,40,69,138,-5},new int[]{-5,8});
    states[8] = new State(-7);
    states[9] = new State(new int[]{40,10});
    states[10] = new State(new int[]{131,11});
    states[11] = new State(new int[]{40,14,139,19,140,24,141,29,126,35,130,37,131,38,151,39},new int[]{-6,12});
    states[12] = new State(new int[]{41,13});
    states[13] = new State(-8);
    states[14] = new State(new int[]{40,14,139,19,140,24,141,29,126,35,130,37,131,38,151,39},new int[]{-6,15});
    states[15] = new State(new int[]{150,16,149,41,147,44,148,47,154,50,153,53});
    states[16] = new State(new int[]{40,14,139,19,140,24,141,29,126,35,130,37,131,38,151,39},new int[]{-6,17});
    states[17] = new State(new int[]{41,18});
    states[18] = new State(-20);
    states[19] = new State(new int[]{40,20});
    states[20] = new State(new int[]{40,14,139,19,140,24,141,29,126,35,130,37,131,38,151,39},new int[]{-6,21});
    states[21] = new State(new int[]{40,14,139,19,140,24,141,29,126,35,130,37,131,38,151,39},new int[]{-6,22});
    states[22] = new State(new int[]{41,23});
    states[23] = new State(-24);
    states[24] = new State(new int[]{40,25});
    states[25] = new State(new int[]{40,14,139,19,140,24,141,29,126,35,130,37,131,38,151,39},new int[]{-6,26});
    states[26] = new State(new int[]{40,14,139,19,140,24,141,29,126,35,130,37,131,38,151,39},new int[]{-6,27});
    states[27] = new State(new int[]{41,28});
    states[28] = new State(-25);
    states[29] = new State(new int[]{40,30});
    states[30] = new State(new int[]{40,14,139,19,140,24,141,29,126,35,130,37,131,38,151,39},new int[]{-6,31});
    states[31] = new State(new int[]{40,14,139,19,140,24,141,29,126,35,130,37,131,38,151,39},new int[]{-6,32});
    states[32] = new State(new int[]{40,14,139,19,140,24,141,29,126,35,130,37,131,38,151,39},new int[]{-6,33});
    states[33] = new State(new int[]{41,34});
    states[34] = new State(-26);
    states[35] = new State(new int[]{40,14,139,19,140,24,141,29,126,35,130,37,131,38,151,39},new int[]{-6,36});
    states[36] = new State(-29);
    states[37] = new State(-30);
    states[38] = new State(-31);
    states[39] = new State(new int[]{40,14,139,19,140,24,141,29,126,35,130,37,131,38,151,39},new int[]{-6,40});
    states[40] = new State(-32);
    states[41] = new State(new int[]{40,14,139,19,140,24,141,29,126,35,130,37,131,38,151,39},new int[]{-6,42});
    states[42] = new State(new int[]{41,43});
    states[43] = new State(-21);
    states[44] = new State(new int[]{40,14,139,19,140,24,141,29,126,35,130,37,131,38,151,39},new int[]{-6,45});
    states[45] = new State(new int[]{41,46});
    states[46] = new State(-22);
    states[47] = new State(new int[]{40,14,139,19,140,24,141,29,126,35,130,37,131,38,151,39},new int[]{-6,48});
    states[48] = new State(new int[]{41,49});
    states[49] = new State(-23);
    states[50] = new State(new int[]{40,14,139,19,140,24,141,29,126,35,130,37,131,38,151,39},new int[]{-6,51});
    states[51] = new State(new int[]{41,52});
    states[52] = new State(-27);
    states[53] = new State(new int[]{40,14,139,19,140,24,141,29,126,35,130,37,131,38,151,39},new int[]{-6,54});
    states[54] = new State(new int[]{41,55});
    states[55] = new State(-28);
    states[56] = new State(-9);
    states[57] = new State(-10);
    states[58] = new State(-11);
    states[59] = new State(-12);
    states[60] = new State(new int[]{40,14,139,19,140,24,141,29,126,35,130,37,131,38,151,39},new int[]{-6,61});
    states[61] = new State(-13);
    states[62] = new State(new int[]{40,14,139,19,140,24,141,29,126,35,130,37,131,38,151,39},new int[]{-6,63});
    states[63] = new State(-14);
    states[64] = new State(new int[]{130,65});
    states[65] = new State(-15);
    states[66] = new State(-16);
    states[67] = new State(-17);
    states[68] = new State(-18);
    states[69] = new State(new int[]{40,14,139,19,140,24,141,29,126,35,130,37,131,38,151,39},new int[]{-6,70});
    states[70] = new State(new int[]{41,71});
    states[71] = new State(new int[]{152,72});
    states[72] = new State(new int[]{40,73});
    states[73] = new State(new int[]{142,9,136,56,146,57,145,58,130,59,133,60,134,62,144,64,137,66,135,67,132,68,40,69},new int[]{-4,74,-5,76});
    states[74] = new State(new int[]{41,75,142,9,136,56,146,57,145,58,130,59,133,60,134,62,144,64,137,66,135,67,132,68,40,69},new int[]{-5,8});
    states[75] = new State(-19);
    states[76] = new State(-6);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,129});
    rules[2] = new Rule(-1, new int[]{});
    rules[3] = new Rule(-1, new int[]{-1,-3,138});
    rules[4] = new Rule(-1, new int[]{-1,128,138});
    rules[5] = new Rule(-3, new int[]{-4});
    rules[6] = new Rule(-4, new int[]{-5});
    rules[7] = new Rule(-4, new int[]{-4,-5});
    rules[8] = new Rule(-5, new int[]{142,40,131,-6,41});
    rules[9] = new Rule(-5, new int[]{136});
    rules[10] = new Rule(-5, new int[]{146});
    rules[11] = new Rule(-5, new int[]{145});
    rules[12] = new Rule(-5, new int[]{130});
    rules[13] = new Rule(-5, new int[]{133,-6});
    rules[14] = new Rule(-5, new int[]{134,-6});
    rules[15] = new Rule(-5, new int[]{144,130});
    rules[16] = new Rule(-5, new int[]{137});
    rules[17] = new Rule(-5, new int[]{135});
    rules[18] = new Rule(-5, new int[]{132});
    rules[19] = new Rule(-5, new int[]{40,-6,41,152,40,-4,41});
    rules[20] = new Rule(-6, new int[]{40,-6,150,-6,41});
    rules[21] = new Rule(-6, new int[]{40,-6,149,-6,41});
    rules[22] = new Rule(-6, new int[]{40,-6,147,-6,41});
    rules[23] = new Rule(-6, new int[]{40,-6,148,-6,41});
    rules[24] = new Rule(-6, new int[]{139,40,-6,-6,41});
    rules[25] = new Rule(-6, new int[]{140,40,-6,-6,41});
    rules[26] = new Rule(-6, new int[]{141,40,-6,-6,-6,41});
    rules[27] = new Rule(-6, new int[]{40,-6,154,-6,41});
    rules[28] = new Rule(-6, new int[]{40,-6,153,-6,41});
    rules[29] = new Rule(-6, new int[]{126,-6});
    rules[30] = new Rule(-6, new int[]{130});
    rules[31] = new Rule(-6, new int[]{131});
    rules[32] = new Rule(-6, new int[]{151,-6});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 4: // list -> list, error, EOL
{ yyerrok(); }
        break;
      case 5: // statement -> sequence
{ this.DoStat(ValueStack[ValueStack.Depth-1]); }
        break;
      case 6: // sequence -> action
{ CurrentSemanticValue = MakeSequence(NodeTag.sequence, ValueStack[ValueStack.Depth-1]); }
        break;
      case 7: // sequence -> sequence, action
{ CurrentSemanticValue = MakeSequence(NodeTag.sequence, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 8: // action -> ASSIGN, '(', LETTER, expr, ')'
{ CurrentSemanticValue = MakeBinary(NodeTag.assign, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 9: // action -> EXIT
{ CurrentSemanticValue = MakeLeaf(NodeTag.exit); }
        break;
      case 10: // action -> FOO
{ CurrentSemanticValue = MakeLeaf(NodeTag.foo); }
        break;
      case 11: // action -> BREAK
{ CurrentSemanticValue = MakeLeaf(NodeTag.myBreak); }
        break;
      case 12: // action -> LITERAL
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 13: // action -> EVAL, expr
{ CurrentSemanticValue = MakeUnary(NodeTag.display, ValueStack[ValueStack.Depth-1]); }
        break;
      case 14: // action -> GETTYPE, expr
{ CurrentSemanticValue = MakeUnary(NodeTag.getType, ValueStack[ValueStack.Depth-1]); }
        break;
      case 15: // action -> MODECHANGE, LITERAL
{ CurrentSemanticValue = MakeUnary(NodeTag.changeMode, ValueStack[ValueStack.Depth-1]); }
        break;
      case 16: // action -> HELP
{ CurrentSemanticValue = MakeLeaf(NodeTag.help); }
        break;
      case 17: // action -> RESET
{ CurrentSemanticValue = MakeLeaf(NodeTag.clear); }
        break;
      case 18: // action -> PRINT
{ CurrentSemanticValue = MakeLeaf(NodeTag.print); }
        break;
      case 19: // action -> '(', expr, ')', CONDITION, '(', sequence, ')'
{ CurrentSemanticValue = MakeBinary(NodeTag.condition, ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-2]); }
        break;
      case 20: // expr -> '(', expr, MULT, expr, ')'
{ CurrentSemanticValue = MakeBinary(NodeTag.mul, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 21: // expr -> '(', expr, DIV, expr, ')'
{ CurrentSemanticValue = MakeBinary(NodeTag.div, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 22: // expr -> '(', expr, ADD, expr, ')'
{ CurrentSemanticValue = MakeBinary(NodeTag.plus, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 23: // expr -> '(', expr, MINUS, expr, ')'
{ CurrentSemanticValue = MakeBinary(NodeTag.minus, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 24: // expr -> SMALLER, '(', expr, expr, ')'
{ CurrentSemanticValue = MakeBinary(NodeTag.smaller, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 25: // expr -> BIGGER, '(', expr, expr, ')'
{ CurrentSemanticValue = MakeBinary(NodeTag.bigger, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 26: // expr -> SUBSTRING, '(', expr, expr, expr, ')'
{ CurrentSemanticValue = MakeTernary(NodeTag.subString, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]);}
        break;
      case 27: // expr -> '(', expr, NOTEQUAL, expr, ')'
{ CurrentSemanticValue = MakeBinary(NodeTag.notequal, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 28: // expr -> '(', expr, DISJUNCTION, expr, ')'
{ CurrentSemanticValue = MakeBinary(NodeTag.disjunction, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 29: // expr -> '~', expr
{ CurrentSemanticValue = MakeUnary(NodeTag.sqrt, ValueStack[ValueStack.Depth-1]); }
        break;
      case 32: // expr -> NEG, expr
{ CurrentSemanticValue = MakeUnary(NodeTag.negate, ValueStack[ValueStack.Depth-1]); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

/*
 * All the code is in the helper file RealTreeHelper.cs 
 */ 
}
}
